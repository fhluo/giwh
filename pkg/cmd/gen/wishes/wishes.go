package wishes

import (
	"bytes"
	_ "embed"
	. "github.com/dave/jennifer/jen"
	"github.com/dop251/goja"
	"github.com/fhluo/giwh/i18n"
	"github.com/mitchellh/mapstructure"
	"github.com/samber/lo"
	"github.com/spf13/cobra"
	"golang.org/x/exp/slices"
	"golang.org/x/exp/slog"
	"os"
	"strconv"
)

var (
	//go:embed wishes.js
	wishesJS string

	Wishes       map[string][]i18n.WishType
	SharedWishes map[string][]i18n.WishType

	log = slog.With("gen wishes")
)

func init() {
	vm := goja.New()

	_, err := vm.RunString(wishesJS)
	if err != nil {
		log.Error(err.Error(), nil)
		os.Exit(1)
	}

	err = mapstructure.WeakDecode(vm.Get("itemTypeMap").Export(), &SharedWishes)
	if err != nil {
		log.Error(err.Error(), nil)
		os.Exit(1)
	}

	err = mapstructure.WeakDecode(vm.Get("itemTypeNameMap").Export(), &Wishes)
	if err != nil {
		log.Error(err.Error(), nil)
		os.Exit(1)
	}

	for key := range Wishes {
		slices.SortFunc(Wishes[key], func(a, b i18n.WishType) bool {
			return a.Key < b.Key
		})
	}

	for key := range SharedWishes {
		slices.SortFunc(SharedWishes[key], func(a, b i18n.WishType) bool {
			return a.Key < b.Key
		})
	}
}

func NewCmd() *cobra.Command {
	var packageName string

	cmd := &cobra.Command{
		Use:   "wishes",
		Short: "Generate pkg/wishes/types.go",
		RunE: func(cmd *cobra.Command, args []string) error {
			file := NewFile(packageName)
			file.HeaderComment("Code generated by `giwh gen wishes`. DO NOT EDIT.")

			types := lo.Union(Wishes[i18n.English.Key], SharedWishes[i18n.English.Key])
			slices.SortStableFunc(types, func(a, b i18n.WishType) bool {
				return a.Key < b.Key
			})

			file.Type().Id("Type").Int().Line()
			file.Add(TypesDefs(types))
			file.Add(WishTypes("Wishes", Wishes[i18n.English.Key]))
			file.Add(WishTypes("SharedWishes", SharedWishes[i18n.English.Key]))

			buffer := bytes.NewBuffer(nil)
			if err := file.Render(buffer); err != nil {
				return err
			}

			if err := os.WriteFile("types.go", buffer.Bytes(), 0666); err != nil {
				return err
			}

			return nil
		},
	}

	cmd.Flags().StringVarP(&packageName, "pkg", "p", "wish", "package name")

	return cmd
}

func TypesDefs(types []i18n.WishType) Code {
	return Const().Defs(lo.Map(types, func(t i18n.WishType, _ int) Code {
		return Id(t.VarName()).Id("Type").Op("=").Lit(t.Key)
	})...).Line()
}

func WishTypes(name string, types []i18n.WishType) Code {
	return Var().Id(name).Op("=").Index().Id("Type").Add(
		Op("{").Line().Add(
			lo.Map(types, func(t i18n.WishType, _ int) Code {
				return Id(t.VarName()).Op(",").Comment(strconv.Itoa(t.Key)).Line()
			})...,
		).Op("}"),
	).Line()
}
