package menus

import (
	"bytes"
	. "github.com/dave/jennifer/jen"
	"github.com/fhluo/giwh/i18n"
	"github.com/fhluo/giwh/pkg/naming"
	"github.com/fhluo/giwh/pkg/wiki"
	"github.com/samber/lo"
	"github.com/spf13/cobra"
	"os"
)

func NewCmd() *cobra.Command {
	var packageName string

	cmd := &cobra.Command{
		Use:   "menus",
		Short: "Generate pkg/wiki/menus.go",
		RunE: func(cmd *cobra.Command, args []string) error {
			enWiki := wiki.Wiki{Language: i18n.English}

			leafMenus, err := enWiki.GetLeafMenus()
			if err != nil {
				return err
			}

			menus := Menus(lo.Filter(leafMenus, func(menu wiki.Menu, _ int) bool {
				return menu.HasPage
			}))

			file := NewFile(packageName)
			file.HeaderComment("Code generated by `giwh gen menus`. DO NOT EDIT.")
			file.Add(menus.Defs())
			file.Add(menus.Menus())

			buffer := bytes.NewBuffer(nil)
			if err = file.Render(buffer); err != nil {
				return err
			}

			if err = os.WriteFile("menus.go", buffer.Bytes(), 0666); err != nil {
				return err
			}

			return nil
		},
	}

	cmd.Flags().StringVarP(&packageName, "pkg", "p", "wiki", "package name")

	return cmd
}

type Menus []wiki.Menu

func (menus Menus) Defs() Code {
	return Var().Defs(lo.Map(menus, func(menu wiki.Menu, _ int) Code {
		return Id(naming.Var(menu.Name)).Op("=").Id("Menu").Values(Dict{
			Id("ID"):   Lit(menu.ID),
			Id("Name"): Lit(menu.Name),
		})
	})...).Line()
}

func (menus Menus) Menus() Code {
	return Var().Id("Menus").Op("=").Index().Id("Menu").Add(
		Op("{").Line().Add(
			lo.Map(menus, func(menu wiki.Menu, _ int) Code {
				return Id(naming.Var(menu.Name)).Op(",").Line()
			})...,
		).Op("}"),
	).Line()
}
